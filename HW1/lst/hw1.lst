


ARM Macro Assembler    Page 1 


    1 00000000         ; hw1.s ECE353
    2 00000000         
    3 00000000         
    4 00000000                 export           hw1_search_memory
    5 00000000                 import           WS2812B_write
    6 00000000         
    7 00000000 00000001 
                       BYTE    EQU              1
    8 00000000 00000018 
                       LED_ARRAY_SIZE
                               EQU              24
    9 00000000         ;**********************************************
   10 00000000         ; SRAM
   11 00000000         ;**********************************************
   12 00000000                 AREA             SRAM, READWRITE
   13 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 LED_ARRAY
                               SPACE            LED_ARRAY_SIZE*BYTE
   14 00000018         
   15 00000018         
   16 00000018                 align
   17 00000018         
   18 00000018         ;**********************************************
   19 00000018         ; Constant Variables (FLASH) Segment
   20 00000018         ;**********************************************
   21 00000018                 AREA             FLASH, CODE, READONLY
   22 00000000 54525453 
                       START   EQU              0x54525453  ; ASCII values back
                                                            wards in hex for li
                                                            ttle endian
   23 00000000 4B455242 
                       BREK    EQU              0x4B455242
   24 00000000 444C4F48 
                       HOLD    EQU              0x444C4F48
   25 00000000 0044454C 
                       LED     EQU              0x0044454C
   26 00000000         
   27 00000000         
   28 00000000         
   29 00000000         ;**********************************************
   30 00000000         ; hw1_update_leds
   31 00000000         ;
   32 00000000         ; Updates the LEDs with the current value saved
   33 00000000         ; in the LED array
   34 00000000         ;**********************************************
   35 00000000         
   36 00000000         hw1_update_leds
                               PROC
   37 00000000 B506            PUSH{R1-R2,      LR}
   38 00000002 49A4            LDR              R1, =(LED_ARRAY) ; Loads parame
                                                            ters for the WS2812
                                                            B_write method
   39 00000004 F04F 0208       MOV              R2, #8      ; Number of LEDs to



ARM Macro Assembler    Page 2 


                                                             update
   40 00000008 F7FF FFFE       BL               WS2812B_write
   41 0000000C BD06            POP{R1-R2,       PC}
   42 0000000E 4770            BX               LR
   43 00000010                 ENDP
   44 00000010         
   45 00000010         
   46 00000010         ;**********************************************
   47 00000010         ; hw1_ascii_to_hex
   48 00000010         ;
   49 00000010         ; Converts the ASCII value passed in to a hex
   50 00000010         ; value. The ASCII values are 0-9, a-f, A-f
   51 00000010         ; Parameters:
   52 00000010         ; R0 - ASCII Character
   53 00000010         ;
   54 00000010         ; Returns:
   55 00000010         ; R0 - numerical value, 0xFFFFFFF if invaild
   56 00000010         ;
   57 00000010         ;**********************************************
   58 00000010         
   59 00000010         hw1_ascii_to_hex
                               PROC
   60 00000010         
   61 00000010 2830            CMP              R0, #0x30   ; Compare to see if
                                                             parameter is in th
                                                            e range of 30< 
   62 00000012 DB04            BLT              check_cap_alpha
   63 00000014         
   64 00000014 2839            CMP              R0, #0x39
   65 00000016 DC02            BGT              check_cap_alpha ; Value was out
                                                            side of numerical r
                                                            ange
   66 00000018 F1A0 0030       SUB              R0, R0, #0x30 ; Value was in ra
                                                            nge, remove 0x30 to
                                                             get numerical valu
                                                            e and return 
   67 0000001C E011            B                DONE
   68 0000001E         
   69 0000001E         check_cap_alpha
   70 0000001E         
   71 0000001E 2841            CMP              R0, #0x41   ; Compare to see if
                                                             parameter is in th
                                                            e range of 40<
   72 00000020 DB04            BLT              check_alpha
   73 00000022         
   74 00000022 2846            CMP              R0, #0x46
   75 00000024 DC02            BGT              check_alpha ; Value was outside
                                                             of numerical range
                                                            
   76 00000026 F1A0 0037       SUB              R0, R0, #0x37 ; Value was in ra
                                                            nge, remove 0x37 to
                                                             get capital value 
                                                            and return 
   77 0000002A E00A            B                DONE
   78 0000002C         
   79 0000002C         check_alpha
   80 0000002C         
   81 0000002C 2861            CMP              R0, #0x61   ; Value was outside
                                                             of a-e ascii 



ARM Macro Assembler    Page 3 


   82 0000002E DB04            BLT              invalid_hex
   83 00000030         
   84 00000030 2866            CMP              R0, #0x66
   85 00000032 DC02            BGT              invalid_hex
   86 00000034 F1A0 0057       SUB              R0, R0, #0x57 ; Value was in ra
                                                            nge, remove 0x46 to
                                                             get value and retu
                                                            rn 
   87 00000038 E003            B                DONE
   88 0000003A         
   89 0000003A         invalid_hex
   90 0000003A F64F 70FF 
              F6CF 70FF        MOV32            R0, #0xFFFFFFFF ; Return invail
                                                            d number
   91 00000042         
   92 00000042         DONE
   93 00000042 4770            BX               LR
   94 00000044                 ENDP
   95 00000044         
   96 00000044         ;**********************************************
   97 00000044         ; hw1_ascii_to_dec
   98 00000044         ;
   99 00000044         ; Converts the ASCII value passed in to a dec
  100 00000044         ; value. The ASCII values are 0-9
  101 00000044         ; Parameters:
  102 00000044         ; R0 - ASCII Character
  103 00000044         ;
  104 00000044         ; Returns:
  105 00000044         ; R0 - numerical value, 0xFFFFFFF if invaild
  106 00000044         ;
  107 00000044         ;**********************************************
  108 00000044         
  109 00000044         hw1_ascii_to_dec
                               PROC
  110 00000044 B506            PUSH{R1-R2,      LR}
  111 00000046 F04F 0130       MOV              R1, #0x30   ; Compare to see if
                                                             parameter is in th
                                                            e range of 30<
  112 0000004A 4288            CMP              R0, R1
  113 0000004C DB06            BLT              invaild_dec
  114 0000004E F04F 0239       MOV              R2, #0x39   ; Value was outside
                                                             of numerical range
                                                            
  115 00000052 4290            CMP              R0, R2
  116 00000054 DC02            BGT              invaild_dec
  117 00000056 EBA0 0001       SUB              R0, R0, R1  ; Value was in rang
                                                            e, remove 0x30 to g
                                                            et numerical value 
                                                            and return
  118 0000005A E003            B                DONE_DEC
  119 0000005C         
  120 0000005C         invaild_dec
  121 0000005C F64F 70FF 
              F6CF 70FF        MOV32            R0, #0xFFFFFFFF ; Return invail
                                                            d number
  122 00000064         
  123 00000064         DONE_DEC
  124 00000064 BD06            POP{R1-R2,       PC}
  125 00000066 4770            BX               LR



ARM Macro Assembler    Page 4 


  126 00000068                 ENDP
  127 00000068         
  128 00000068         ;**********************************************
  129 00000068         ; hw1_init
  130 00000068         ;
  131 00000068         ; Turns off all LEDSs on the board by writing 0 
  132 00000068         ; to the LED Array
  133 00000068         ;
  134 00000068         ;**********************************************
  135 00000068         hw1_init
                               PROC
  136 00000068 B506            PUSH{R1-R2,      LR}
  137 0000006A         
  138 0000006A F240 0100 
              F2C0 0100        MOV32            R1, #0x00000000
  139 00000072 4A88            LDR              R2, =(LED_ARRAY) ; Load LED Arr
                                                            ay ADDR
  140 00000074         
  141 00000074 F842 1B04       STR              R1, [R2], #4 ; Clear all bytes 
                                                            of the array
  142 00000078 F842 1B04       STR              R1, [R2], #4
  143 0000007C F842 1B04       STR              R1, [R2], #4
  144 00000080 F842 1B04       STR              R1, [R2], #4
  145 00000084 F842 1B04       STR              R1, [R2], #4
  146 00000088 F842 1B04       STR              R1, [R2], #4
  147 0000008C         
  148 0000008C F7FF FFFE       BL               hw1_update_leds ; calls update 
                                                            to reset lights
  149 00000090 BD06            POP{R1-R2,       PC}
  150 00000092 4770            BX               LR
  151 00000094                 ENDP
  152 00000094         
  153 00000094         
  154 00000094         ;**********************************************
  155 00000094         ; hw1_ledx
  156 00000094         ;
  157 00000094         ; Updates the color values in the LED array
  158 00000094         ; to the colors passed in as parameters.
  159 00000094         ; Then calls hw1_update_leds to update the color
  160 00000094         ;
  161 00000094         ; Parameters:
  162 00000094         ; R0 - LED number to update
  163 00000094         ;
  164 00000094         ; R1 - Value to write the LEDs to
  165 00000094         ;
  166 00000094         ;**********************************************
  167 00000094         
  168 00000094         hw1_ledx
                               PROC
  169 00000094         
  170 00000094 E92D 41DE       PUSH{R1-R4,      R6-R8, LR}
  171 00000098         
  172 00000098         ; Creates a mask to extract RGB values
  173 00000098         ; Shifts all bytes to be LSB
  174 00000098         
  175 00000098 F401 067F       AND              R6, R1, #0xFF0000 ; Green
  176 0000009C EA4F 4616       LSR              R6, R6, #16
  177 000000A0 F401 477F       AND              R7, R1, #0x00FF00 ; Red
  178 000000A4 EA4F 2717       LSR              R7, R7, #8



ARM Macro Assembler    Page 5 


  179 000000A8 F001 08FF       AND              R8, R1, #0x0000FF ; Blue
  180 000000AC         
  181 000000AC         
  182 000000AC 4A79            LDR              R2, =(LED_ARRAY)
  183 000000AE F04F 0407       MOV              R4, #7
  184 000000B2 EBA4 0300       SUB              R3, R4, R0  ; Since LED7 is at 
                                                            base address we nee
                                                            d to make an offset
                                                            
  185 000000B6 EB03 0103       ADD              R1, R3, R3
  186 000000BA 4419            ADD              R1, R1, R3  ; Multiply by 3 for
                                                             each GRB part of a
                                                            rray
  187 000000BC 440A            ADD              R2, R2, R1
  188 000000BE         
  189 000000BE F802 6B01       STRB             R6, [R2], #1 ; Store Array Valu
                                                            es
  190 000000C2 F802 7B01       STRB             R7, [R2], #1
  191 000000C6 F802 8B01       STRB             R8, [R2], #1
  192 000000CA         
  193 000000CA F7FF FFFE       BL               hw1_update_leds ; Call update t
                                                            o LEDs
  194 000000CE         
  195 000000CE E8BD 81DE       POP{R1-R4,       R6-R8, PC}
  196 000000D2         
  197 000000D2 4770            BX               LR
  198 000000D4                 ENDP
  199 000000D4         
  200 000000D4         ;**********************************************
  201 000000D4         ; hw1_wait
  202 000000D4         ;
  203 000000D4         ; Loops around an incremental loop to wait out
  204 000000D4         ; cycles passed in
  205 000000D4         ;
  206 000000D4         ; Parameters:
  207 000000D4         ; R0 - Number to wait for
  208 000000D4         ;
  209 000000D4         ;**********************************************
  210 000000D4         hw1_wait
                               PROC
  211 000000D4 B402            PUSH{R1}
  212 000000D6 F04F 0100       MOV              R1, #0x0    ; Load counter
  213 000000DA         while_start_wait
  214 000000DA 4288            CMP              R0, R1
  215 000000DC D002            BEQ              done_wait
  216 000000DE F101 0101       ADD              R1, R1, #1  ; Increment 
  217 000000E2 E7FA            B                while_start_wait
  218 000000E4         done_wait
  219 000000E4 BC02            POP{R1}
  220 000000E6 4770            BX               LR
  221 000000E8                 ENDP
  222 000000E8         
  223 000000E8         
  224 000000E8         
  225 000000E8         ;**********************************************
  226 000000E8         ; hw1_search_memory
  227 000000E8         ;
  228 000000E8         ; Converts the ASCII value passed in to a hex
  229 000000E8         ; value. The ASCII values are 0-9, a-f, A-f



ARM Macro Assembler    Page 6 


  230 000000E8         ;
  231 000000E8         ; Parameters:
  232 000000E8         ; R0 - starting address of memory that contains
  233 000000E8         ; the command to update LED
  234 000000E8         ;
  235 000000E8         ;**********************************************
  236 000000E8         
  237 000000E8         hw1_search_memory
                               PROC
  238 000000E8 E92D 479F       PUSH{R0-R4,      R7-R10, LR}
  239 000000EC         
  240 000000EC 4681            MOV              R9, R0      ; Move the passed p
                                                            aram into R9 to be 
                                                            modified and so R0 
                                                            can be used to pass
                                                             params
  241 000000EE         while_start                          ; An infinite loop 
                                                            unless a BREK comma
                                                            nd
  242 000000EE         
  243 000000EE F8D9 2000       LDR              R2, [R9]
  244 000000F2 F245 4353 
              F2C5 4352        MOV32            R3, START
  245 000000FA 429A            CMP              R2, R3      ; check for STRT
  246 000000FC         
  247 000000FC D101            BNE              check_break ; check for the nex
                                                            t condition
  248 000000FE F7FF FFFE       BL               hw1_init
  249 00000102         
  250 00000102         
  251 00000102         
  252 00000102         check_break
  253 00000102 F245 2342 
              F6C4 3345        MOV32            R3, BREK
  254 0000010A 429A            CMP              R2, R3
  255 0000010C D100            BNE              check_hold  ; check for the nex
                                                            t condition
  256 0000010E E0BD            B                end_prog    ; value is break so
                                                             we will enter an i
                                                            nfinte loop
  257 00000110         
  258 00000110         
  259 00000110         check_hold
  260 00000110 F644 7348 
              F2C4 434C        MOV32            R3, HOLD    ; check to see if c
                                                            md is HOLD
  261 00000118 429A            CMP              R2, R3
  262 0000011A D139            BNE              check_LED   ; Not HOLD so check
                                                             for the last condi
                                                            tion
  263 0000011C         
  264 0000011C F899 0004       LDRB             R0, [R9, #4] ; Index by 4 to pa
                                                            st HOLD ascii
  265 00000120 F7FF FFFE       BL               hw1_ascii_to_dec ; Need to conv
                                                            ert HEX to Dec and 
                                                            multiply to get par
                                                            am
  266 00000124         
  267 00000124 F64F 73FF 



ARM Macro Assembler    Page 7 


              F6CF 73FF        MOV32            R3, #0xFFFFFFFF ; check that va
                                                            lue is valid
  268 0000012C 4298            CMP              R0, R3
  269 0000012E D02C            BEQ              end_of_wait
  270 00000130         
  271 00000130 F44F 747A       MOV              R4, #1000
  272 00000134 FB00 FA04       MUL              R10, R0, R4 ; Shift to correct 
                                                            place value
  273 00000138 F04F 0800       MOV              R8, #0      ; Clear register to
                                                             so it can be used 
                                                            for number handing
  274 0000013C 44D0            ADD              R8, R8, R10
  275 0000013E         
  276 0000013E F899 0005       LDRB             R0, [R9, #5] ; index by 5 to ge
                                                            t new value
  277 00000142 F7FF FFFE       BL               hw1_ascii_to_dec
  278 00000146         
  279 00000146 4298            CMP              R0, R3
  280 00000148 D01F            BEQ              end_of_wait
  281 0000014A         
  282 0000014A F04F 0464       MOV              R4, #100
  283 0000014E FB00 FA04       MUL              R10, R0, R4
  284 00000152 44D0            ADD              R8, R8, R10
  285 00000154         
  286 00000154 F899 0006       LDRB             R0, [R9, #6]
  287 00000158 F7FF FFFE       BL               hw1_ascii_to_dec
  288 0000015C         
  289 0000015C 4298            CMP              R0, R3
  290 0000015E D014            BEQ              end_of_wait
  291 00000160         
  292 00000160 F04F 040A       MOV              R4, #10
  293 00000164 FB00 FA04       MUL              R10, R0, R4
  294 00000168 44D0            ADD              R8, R8, R10
  295 0000016A         
  296 0000016A F899 0007       LDRB             R0, [R9, #7]
  297 0000016E F7FF FFFE       BL               hw1_ascii_to_dec
  298 00000172         
  299 00000172 4298            CMP              R0, R3
  300 00000174 D009            BEQ              end_of_wait
  301 00000176         
  302 00000176 4480            ADD              R8, R8, R0
  303 00000178         
  304 00000178 4640            MOV              R0, R8
  305 0000017A F242 7810 
              F2C0 0800        MOV32            R8, #0x2710 ; multiply by 10000
                                                            
  306 00000182 FB00 F008       MUL              R0, R0, R8
  307 00000186 F7FF FFFE       BL               hw1_wait
  308 0000018A         
  309 0000018A         end_of_wait
  310 0000018A         
  311 0000018A F109 0901       ADD              R9, R9, #1  ; Increment loop by
                                                             1
  312 0000018E E7AE            B                while_start
  313 00000190         
  314 00000190         
  315 00000190         check_LED
  316 00000190 F022 427F       BIC              R2, R2, #0xFF000000 ; clear  X 
                                                            from LEDX to get LE



ARM Macro Assembler    Page 8 


                                                            D to compare 
  317 00000194 F244 534C 
              F2C0 0344        MOV32            R3, LED
  318 0000019C 429A            CMP              R2, R3      ;LED
  319 0000019E D172            BNE              end_search
  320 000001A0         
  321 000001A0 F04F 0800       MOV              R8, #0
  322 000001A4 F8D9 2000       LDR              R2, [R9]
  323 000001A8 F002 407F       AND              R0, R2, #0xFF000000 ; Use mask 
                                                            to get least signif
                                                            icant byte and conv
                                                            ert to dec
  324 000001AC EA4F 6010       LSR              R0, R0, #24
  325 000001B0 F7FF FFFE       BL               hw1_ascii_to_dec
  326 000001B4         
  327 000001B4 F64F 73FF 
              F6CF 73FF        MOV32            R3, #0xFFFFFFFF ; Checks for an
                                                             invaild ascii inpu
                                                            t
  328 000001BC 4298            CMP              R0, R3
  329 000001BE D05D            BEQ              end_of_check_led
  330 000001C0 2807            CMP              R0, #7      ; Checks for a vali
                                                            d LED number
  331 000001C2 DC5B            BGT              end_of_check_led
  332 000001C4         
  333 000001C4 4607            MOV              R7, R0      ; Holds the LED num
                                                            erical value so we 
                                                            can call ascii to h
                                                            ex
  334 000001C6         
  335 000001C6 F8D9 1004       LDR              R1, [R9, #4] ; Index by 4 to st
                                                            art reading ASCII v
                                                            alues for LED comma
                                                            nd
  336 000001CA         
  337 000001CA F240 0AFF 
              F2C0 0A00        MOV32            R10, #0xFF  ; Load mask to read
                                                             bit values
  338 000001D2 EA01 000A       AND              R0, R1, R10
  339 000001D6 F7FF FFFE       BL               hw1_ascii_to_hex
  340 000001DA         
  341 000001DA F64F 73FF 
              F6CF 73FF        MOV32            R3, #0xFFFFFFFF
  342 000001E2 4298            CMP              R0, R3
  343 000001E4 D04A            BEQ              end_of_check_led
  344 000001E6         
  345 000001E6 EB08 5800       ADD              R8, R8, R0, LSL #20 
                                                            ; Shift to MSB
  346 000001EA         
  347 000001EA F64F 7A00 
              F2C0 0A00        MOV32            R10, #0xFF00
  348 000001F2 EA01 000A       AND              R0, R1, R10
  349 000001F6 EA4F 2010       LSR              R0, R0, #8
  350 000001FA F7FF FFFE       BL               hw1_ascii_to_hex
  351 000001FE         
  352 000001FE 4298            CMP              R0, R3
  353 00000200 D03C            BEQ              end_of_check_led
  354 00000202         
  355 00000202 EB08 4800       ADD              R8, R8, R0, LSL #16



ARM Macro Assembler    Page 9 


  356 00000206         
  357 00000206 F240 0A00 
              F2C0 0AFF        MOV32            R10, #0xFF0000
  358 0000020E         
  359 0000020E 4298            CMP              R0, R3
  360 00000210 D034            BEQ              end_of_check_led
  361 00000212         
  362 00000212 EA01 000A       AND              R0, R1, R10
  363 00000216 EA4F 4010       LSR              R0, R0, #16
  364 0000021A F7FF FFFE       BL               hw1_ascii_to_hex
  365 0000021E         
  366 0000021E 4298            CMP              R0, R3
  367 00000220 D02C            BEQ              end_of_check_led
  368 00000222         
  369 00000222 EB08 3800       ADD              R8, R8, R0, LSL #12
  370 00000226         
  371 00000226 F240 0A00 
              F6CF 7A00        MOV32            R10, #0xFF000000
  372 0000022E EA01 000A       AND              R0, R1, R10
  373 00000232 EA4F 6010       LSR              R0, R0, #24
  374 00000236 F7FF FFFE       BL               hw1_ascii_to_hex
  375 0000023A         
  376 0000023A 4298            CMP              R0, R3
  377 0000023C D01E            BEQ              end_of_check_led
  378 0000023E         
  379 0000023E EB08 2800       ADD              R8, R8, R0, LSL #8
  380 00000242         
  381 00000242 F8D9 1008       LDR              R1, [R9, #8] ; LDR NEW VALUES S
                                                            INCE CMD HAS 6 BYTE
                                                            S
  382 00000246         
  383 00000246 F240 0AFF 
              F2C0 0A00        MOV32            R10, #0xFF
  384 0000024E EA01 000A       AND              R0, R1, R10
  385 00000252 F7FF FFFE       BL               hw1_ascii_to_hex
  386 00000256         
  387 00000256 4298            CMP              R0, R3
  388 00000258 D010            BEQ              end_of_check_led
  389 0000025A         
  390 0000025A EB08 1800       ADD              R8, R8, R0, LSL #4 ; R8 holds t
                                                            he value for the co
                                                            lor change
  391 0000025E         
  392 0000025E F64F 7A00 
              F2C0 0A00        MOV32            R10, #0xFF00
  393 00000266 EA01 000A       AND              R0, R1, R10
  394 0000026A EA4F 2010       LSR              R0, R0, #8
  395 0000026E F7FF FFFE       BL               hw1_ascii_to_hex
  396 00000272         
  397 00000272 4298            CMP              R0, R3
  398 00000274 D002            BEQ              end_of_check_led
  399 00000276         
  400 00000276 4480            ADD              R8, R8, R0
  401 00000278         
  402 00000278 4638            MOV              R0, R7      ; LOAD PARAMS
  403 0000027A 4641            MOV              R1, R8
  404 0000027C         
  405 0000027C         end_of_check_led
  406 0000027C F7FF FFFE       BL               hw1_ledx



ARM Macro Assembler    Page 10 


  407 00000280 F109 0901       ADD              R9, R9, #1  ; Increment by 1
  408 00000284 E733            B                while_start
  409 00000286         
  410 00000286         end_search
  411 00000286 F109 0901       ADD              R9, R9, #1  ; Increment by 1
  412 0000028A E730            B                while_start
  413 0000028C         
  414 0000028C         end_prog
  415 0000028C E7FE            B                end_prog    ; Infinite loop
  416 0000028E         
  417 0000028E         
  418 0000028E E8BD 879F       POP{R0-R4,       R7-R10, PC}
  419 00000292 4770            BX               LR
  420 00000294                 ENDP
  421 00000294         
  422 00000294                 align
  423 00000294                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\obj\hw1.d -o.\obj\hw1.o -I.\RTE\_HW1 -IC:\Users\Sal\AppDat
a\Local\Arm\Packs\ARM\CMSIS\5.6.0\CMSIS\Core\Include -IC:\Users\Sal\AppData\Loc
al\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SET
A 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 529" -
-predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --list=.\lst\hw1.ls
t hw1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LED_ARRAY 00000000

Symbol: LED_ARRAY
   Definitions
      At line 13 in file hw1.s
   Uses
      At line 38 in file hw1.s
      At line 139 in file hw1.s
      At line 182 in file hw1.s

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 12 in file hw1.s
   Uses
      None
Comment: SRAM unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DONE 00000042

Symbol: DONE
   Definitions
      At line 92 in file hw1.s
   Uses
      At line 67 in file hw1.s
      At line 77 in file hw1.s
      At line 87 in file hw1.s

DONE_DEC 00000064

Symbol: DONE_DEC
   Definitions
      At line 123 in file hw1.s
   Uses
      At line 118 in file hw1.s
Comment: DONE_DEC used once
FLASH 00000000

Symbol: FLASH
   Definitions
      At line 21 in file hw1.s
   Uses
      None
Comment: FLASH unused
check_LED 00000190

Symbol: check_LED
   Definitions
      At line 315 in file hw1.s
   Uses
      At line 262 in file hw1.s
Comment: check_LED used once
check_alpha 0000002C

Symbol: check_alpha
   Definitions
      At line 79 in file hw1.s
   Uses
      At line 72 in file hw1.s
      At line 75 in file hw1.s

check_break 00000102

Symbol: check_break
   Definitions
      At line 252 in file hw1.s
   Uses
      At line 247 in file hw1.s
Comment: check_break used once
check_cap_alpha 0000001E

Symbol: check_cap_alpha
   Definitions
      At line 69 in file hw1.s
   Uses
      At line 62 in file hw1.s
      At line 65 in file hw1.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


check_hold 00000110

Symbol: check_hold
   Definitions
      At line 259 in file hw1.s
   Uses
      At line 255 in file hw1.s
Comment: check_hold used once
done_wait 000000E4

Symbol: done_wait
   Definitions
      At line 218 in file hw1.s
   Uses
      At line 215 in file hw1.s
Comment: done_wait used once
end_of_check_led 0000027C

Symbol: end_of_check_led
   Definitions
      At line 405 in file hw1.s
   Uses
      At line 329 in file hw1.s
      At line 331 in file hw1.s
      At line 343 in file hw1.s
      At line 353 in file hw1.s
      At line 360 in file hw1.s
      At line 367 in file hw1.s
      At line 377 in file hw1.s
      At line 388 in file hw1.s
      At line 398 in file hw1.s

end_of_wait 0000018A

Symbol: end_of_wait
   Definitions
      At line 309 in file hw1.s
   Uses
      At line 269 in file hw1.s
      At line 280 in file hw1.s
      At line 290 in file hw1.s
      At line 300 in file hw1.s

end_prog 0000028C

Symbol: end_prog
   Definitions
      At line 414 in file hw1.s
   Uses
      At line 256 in file hw1.s
      At line 415 in file hw1.s

end_search 00000286

Symbol: end_search
   Definitions
      At line 410 in file hw1.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 319 in file hw1.s
Comment: end_search used once
hw1_ascii_to_dec 00000044

Symbol: hw1_ascii_to_dec
   Definitions
      At line 109 in file hw1.s
   Uses
      At line 265 in file hw1.s
      At line 277 in file hw1.s
      At line 287 in file hw1.s
      At line 297 in file hw1.s
      At line 325 in file hw1.s

hw1_ascii_to_hex 00000010

Symbol: hw1_ascii_to_hex
   Definitions
      At line 59 in file hw1.s
   Uses
      At line 339 in file hw1.s
      At line 350 in file hw1.s
      At line 364 in file hw1.s
      At line 374 in file hw1.s
      At line 385 in file hw1.s
      At line 395 in file hw1.s

hw1_init 00000068

Symbol: hw1_init
   Definitions
      At line 135 in file hw1.s
   Uses
      At line 248 in file hw1.s
Comment: hw1_init used once
hw1_ledx 00000094

Symbol: hw1_ledx
   Definitions
      At line 168 in file hw1.s
   Uses
      At line 406 in file hw1.s
Comment: hw1_ledx used once
hw1_search_memory 000000E8

Symbol: hw1_search_memory
   Definitions
      At line 237 in file hw1.s
   Uses
      At line 4 in file hw1.s
Comment: hw1_search_memory used once
hw1_update_leds 00000000

Symbol: hw1_update_leds
   Definitions
      At line 36 in file hw1.s
   Uses
      At line 148 in file hw1.s
      At line 193 in file hw1.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


hw1_wait 000000D4

Symbol: hw1_wait
   Definitions
      At line 210 in file hw1.s
   Uses
      At line 307 in file hw1.s
Comment: hw1_wait used once
invaild_dec 0000005C

Symbol: invaild_dec
   Definitions
      At line 120 in file hw1.s
   Uses
      At line 113 in file hw1.s
      At line 116 in file hw1.s

invalid_hex 0000003A

Symbol: invalid_hex
   Definitions
      At line 89 in file hw1.s
   Uses
      At line 82 in file hw1.s
      At line 85 in file hw1.s

while_start 000000EE

Symbol: while_start
   Definitions
      At line 241 in file hw1.s
   Uses
      At line 312 in file hw1.s
      At line 408 in file hw1.s
      At line 412 in file hw1.s

while_start_wait 000000DA

Symbol: while_start_wait
   Definitions
      At line 213 in file hw1.s
   Uses
      At line 217 in file hw1.s
Comment: while_start_wait used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREK 4B455242

Symbol: BREK
   Definitions
      At line 23 in file hw1.s
   Uses
      At line 253 in file hw1.s
Comment: BREK used once
BYTE 00000001

Symbol: BYTE
   Definitions
      At line 7 in file hw1.s
   Uses
      At line 13 in file hw1.s
Comment: BYTE used once
HOLD 444C4F48

Symbol: HOLD
   Definitions
      At line 24 in file hw1.s
   Uses
      At line 260 in file hw1.s
Comment: HOLD used once
LED 0044454C

Symbol: LED
   Definitions
      At line 25 in file hw1.s
   Uses
      At line 317 in file hw1.s
Comment: LED used once
LED_ARRAY_SIZE 00000018

Symbol: LED_ARRAY_SIZE
   Definitions
      At line 8 in file hw1.s
   Uses
      At line 13 in file hw1.s
Comment: LED_ARRAY_SIZE used once
START 54525453

Symbol: START
   Definitions
      At line 22 in file hw1.s
   Uses
      At line 244 in file hw1.s
Comment: START used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

WS2812B_write 00000000

Symbol: WS2812B_write
   Definitions
      At line 5 in file hw1.s
   Uses
      At line 40 in file hw1.s
Comment: WS2812B_write used once
1 symbol
371 symbols in table
